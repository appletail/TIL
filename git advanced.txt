● 스테이징
git rm --cached <file>: 언트랙된 파일을 언스테이징
git restore --staged <file>: 트랙된 파일을 언스테이징


● 상태와 로그
git status : git 상태확인
git log : log 확인
    - git log --oneline: 로그를 한 줄로 확인
    - git log --oneline --branches --graph: 브랜치들 간의 관계까지 확인


● 커밋메시지
git commit --amend -m "바꿀 이름": 마지막 커밋의 메시지 변경
    - vim으로 넘어간 경우 s나 i를 누르면 커밋메시지를 작성할 수 있음
    - esc를 누르면 설정상태로 전환
        - :w 저장
        - :q 나가기
        - :wq 저장하고 나가기


● 커밋 리셋
git reset --soft 커밋해시 : 해당 시점으로 헤드 이동 후 그 시점 이후의 파일은 스테이징(git add 상태)
git reset --mixed 커밋해시 : 해당 시점으로 헤드 이동 후 그 시점 이후의 파일은 워킹디렉토리에 저장 (git add 전 상태_untracked)
git reset --hard 커밋해시 : 해당 시점으로 헤드 이동 후 그 시점 이후의 파일은 모두 삭제
git reflog :  지웟던 로그까지 모두 확인
    - git reset --hard  지워진 커밋의 커밋해시: 해당시점으로 지워진 파일을 포함해 복구 가능


● 커밋 취소
git revert 커밋해시: 해당 시점의 커밋을 취소(1 2 3 중 git revert 2를 하면 1 3 만 남음/git revert 1 2 3 하면 동시에 여러개도 가능) 


● 브랜치
git branch : 브랜치 확인
git branch 브랜치 이름 : 브랜치 생성
git switch 브랜치: 해당 브랜치로 이동
git switch -c 브랜치 이름: 브랜치 생성과 이동을 동시에 시행

git merge 브랜치이름 : 베이스로 둘 곳에서 사용해야하며, '브랜치이름'을 병합
git branch -d 브랜치이름: 해당 브랜치 삭제 (병합 이후에는 필요없어진 브랜치를 삭제)


● 병합 세가지
1. fast-forward
    - 빨리 감기처럼 브랜치가 가리키는 커밋을 앞으로 이동시키는 방법
2. 3-way merge
    - 각 브랜치의 커밋 두개와 공통 조상하나를 사용하여 병합하는 방법
3. merge conflict
    - 같은 파일의 같은 부분을 수정 후 병합하는 경우 충돌


● 브랜치 병합충돌
1. 충돌이 일어난 파일 수정
2. git add .
3. git commit


● 워크플로우(콜라보래이터)
1. 로컬에서 브랜치 생성
2. 새브랜치에서 작업
3. 커밋 후 푸시
4. 깃허브에 pull requests 뜸
    - git push origin 푸시할브랜치이름
5. 담당자가 확인 후 병합
6. 로컬에 있는 브랜치 삭제
7. 반복


● 컨트리뷰트 방법
1. 원하는 레포지토리에 가서 fork하기
2. 내 레포지토리에 있는 포크한 것을 클론
3. git remote add upstream 원본레포지토리주소
    - 원본과 연결하는 것
    - upstream은 마음대로 바꿔도 되지만 관용적으로 upstream이 사용됨
4. git remote -v 로 연결된 것 확인
5. 로컬에서 브랜치 생성 후 작업
6. git push origin 브랜치이름
7. 내 깃허브 레포지토리에서 풀리퀘스트 생성
8. git switch master로 옮기기
9. git pull upstream master 로 원본 레포지토리 풀받기
10. 필요하면 병합 후 새로 만든 브랜치 삭제
11. 반복


● git 브랜치 전략
대규모 프로젝트에 적합한 브랜치 전략
  - master: 제품으로 출시될 수 있는 브랜치
  - develope: 다음 출시 버전을 개발하는 브랜치
  - feature: 기능을 개발하는 브랜치
  - release: 이번 출시 버전을 준비하는 브랜치
  - hotfix: 출시 버전에서 발생한 버그를 수정하는 브랜치
 github 전략, gitlab전략 등